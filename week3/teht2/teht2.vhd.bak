library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity segmenttilaskuri is
    Port (
        start_stop_button : in  STD_LOGIC_VECTOR(1 downto 0);
        clk : in  STD_LOGIC;
        segmentit_sekunnit : out STD_LOGIC_VECTOR(6 downto 0);
        segmentit_kymmenet : out STD_LOGIC_VECTOR(6 downto 0)
    );
end segmenttilaskuri;

architecture Behavioral of segmenttilaskuri is
    signal sekunti_counter : natural range 0 to 9 := 0;
    signal kymmenys_counter : natural range 0 to 9 := 0;
    signal clk_counter : natural range 0 to 50000000 := 0;  -- Oletetaan, että kellotaajuus on 50 MHz
begin

    -- Kellotaajuuden jakaminen 1 sekunnin tahdille
    process(clk)
    begin 
        if rising_edge(clk) then
            clk_counter <= clk_counter + 1; 
            
            if clk_counter >= 50000000 then  -- 1 sekunnin aikajakso (50 MHz kellolle)
                clk_counter <= 0;

                -- Sekuntilaskurin päivitys
                if sekunti_counter = 9 then
                    sekunti_counter <= 0;
                    
                    -- Kymmenyslaskurin päivitys
                    if kymmenys_counter = 9 then
                        kymmenys_counter <= 0;
                    else
                        kymmenys_counter <= kymmenys_counter + 1;
                    end if;
                else
                    sekunti_counter <= sekunti_counter + 1;
                end if;
            end if;
        end if; 
    end process;

    -- 7-segmenttinäytön päivitys sekuntilaskurin perusteella
    process(sekunti_counter, kymmenys_counter)
    begin 
        case sekunti_counter is 
            when 0 => segmentit_sekunnit <= "0000001";  -- 0
            when 1 => segmentit_sekunnit <= "1001111";  -- 1
            when 2 => segmentit_sekunnit <= "0010010";  -- 2
            when 3 => segmentit_sekunnit <= "0000110";  -- 3
            when 4 => segmentit_sekunnit <= "1001100";  -- 4
            when 5 => segmentit_sekunnit <= "0100100";  -- 5
            when 6 => segmentit_sekunnit <= "0100000";  -- 6
            when 7 => segmentit_sekunnit <= "0001111";  -- 7
            when 8 => segmentit_sekunnit <= "0000000";  -- 8
            when 9 => segmentit_sekunnit <= "0000100";  -- 9
            when others => segmentit_sekunnit <= "1111111";  -- Kaikki segmentit pois päältä
        end case;

        case kymmenys_counter is 
            when 0 => segmentit_kymmenet <= "0000001";  -- 0
            when 1 => segmentit_kymmenet <= "1001111";  -- 1
            when 2 => segmentit_kymmenet <= "0010010";  -- 2
            when 3 => segmentit_kymmenet <= "0000110";  -- 3
            when 4 => segmentit_kymmenet <= "1001100";  -- 4
            when 5 => segmentit_kymmenet <= "0100100";  -- 5
            when 6 => segmentit_kymmenet <= "0100000";  -- 6
            when 7 => segmentit_kymmenet <= "0001111";  -- 7
            when 8 => segmentit_kymmenet <= "0000000";  -- 8
            when 9 => segmentit_kymmenet <= "0000100";  -- 9
            when others => segmentit_kymmenet <= "1111111";  -- Kaikki segmentit pois päältä
        end case;
    end process;

end Behavioral;
